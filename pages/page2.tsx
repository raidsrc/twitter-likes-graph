import type { NextPage } from 'next'
import Head from 'next/head'
import Link from 'next/link'
import { Dispatch, PropsWithoutRef, SetStateAction, useEffect, useRef, useState } from 'react'
import styles from '../styles/Home.module.css'
import styles2 from '../styles/Chart.module.css'
import { VictoryAxis, VictoryChart, VictoryHistogram, VictoryLabel, VictoryLegend } from 'victory'
import { NewTwitterLikeObject } from './api/fetch-local-twitter-likes'
import * as d3 from "d3"
// import MyResponsiveBar from '../components/nivo2'

type NewNewTwitterLikeObject = {
  id: string
  created_at: string
  text: string
  created_at_date: Date
}
interface Props {

}

const GraphPage: NextPage = () => {
  const [realData, setRealData] = useState([{ id: "", created_at: "", text: "", created_at_date: new Date() }])

  useEffect(() => {
    // createGraph()
    // processData()
    // console.log(newData2)
    let newRealDataWithDate: Array<NewNewTwitterLikeObject> = []
    getRealData().then((theData) => {
      for (let i = 0; i < theData.length; i++) {
        let abc = {
          ...theData[i],
          created_at_date: new Date(theData[i].created_at)
        }
        newRealDataWithDate.push(abc)
      }
      setRealData(newRealDataWithDate)
    })
  }, [])

  // const d3TimeScaleFunction = d3.scaleTime().domain([new Date("2017-01-01T08:00Z"), new Date("2023-01-02T08:00Z")])
  const d3TimeScaleFunction = d3.scaleTime().domain(d3.extent(realData, datum => datum.created_at_date))
  const bins = d3.utcTicks(new Date(Date.UTC(2017, 0)), new Date(Date.UTC(2023, 0)), 20)
  return (
    <div className={styles.container}>
      <Head>
        <title>Twitter Likes Graph</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className={styles.main}>
      <h1>Amount of Liked Twitter Posts Over Time for @raidsrc</h1>
        <div className={styles2.barchart}>
          <VictoryChart domainPadding={10}
          padding={{ left: 70, right: 10 }}
          >
            {/* <VictoryAxis tickValues={bins} tickFormat={(t: Date) => {String(t)}} /> */}
            {/* <VictoryAxis dependentAxis tickValues={[500, 1000, 1500, 2000]} label="Number of Tweets" axisLabelComponent={<VictoryLabel dy={-20} />} /> */}
            {/* <VictoryAxis tickValues={bins} tickCount={6} tickFormat={(tick) => `${(new Date(tick)).getFullYear()}`} label="Year Tweeted" axisLabelComponent={<VictoryLabel dy={10} />} /> */}
            <VictoryHistogram data={realData} x={"created_at_date"} bins={bins} />
            {/* <VictoryLabel x={200} y={290} text="Year Tweeted" /> */}
            {/* <VictoryLabel x={10} y={180} text="Number of Tweets" angle={270}/> */}
          </VictoryChart>
        </div>

        <Link href="/">go back</Link>
      </main>
    </div>
  )
}

async function getRealData() {
  let response: Array<NewTwitterLikeObject> = await (await fetch("api/fetch-local-twitter-likes")).json()
  return response
}

export default GraphPage
